---

- name: connect to bare metal
  hosts: oc-us-south1-int2.1873039
  user: cioauto
  become: true
  any_errors_fatal: true
  max_fail_percentage: 0
  vars:
    api_key: apikey
    IS_OK: OK

  tasks:
  - name: get the api to connect to openshift and filter out api openshift and create variable
    command: cat /var/lib/dnsmasq/ocnet.addnhosts | grep api.us | awk '{print $3}'
    register: output_result
  - set_fact: 
    url_api: "{{ output_result.stdout }}"
  tags: 
   - never
   - ocpconnect
   
  tasks:
  - name: Authenticate with token, return all pods and services
    plugin: openshift
    connections:
    - host: "https://{{ url_api }}:6443"
      api_key: apikey
      verify_ssl: false
    - namespaces:
      - Default
  tags: 
   - never
   - ocpconnect

  ############### list nodes and decision to skip####################

- block:
  - name:  node lines count (nlc) 
    command: 'oc get nodes | wc -l | awk '{print $1-1 " " $2}'
    register: nlc
  - name:   node ready column count (nrcc)
    command: 'oc get nodes | awk '{sum += $2 == "Ready"} END {print sum}'
    register: nrcc
  failed_when: nlc.rc != nrcc.rc or nlc.rc < 3 or nrcc.rc < 3
   tags: 
    - never
    - pre-healthcheck
    
  block:
  - name: clusteroperators lines  
    command: 'oc get co | wc -l | awk '{print $1-1 " " $3}''
    register: colc
  - name: cluster operator True count
    command: 'oc get co | awk '{sum += $3 == "True"} END {print sum}''
    register: cotc
  failed_when: colc.rc != cotc.rc or colc.rc < 5 or cotc.rc < 5
   tags: 
   - never
   - pre-healthcheck

#######################
  task:
    -name: drain node   
        oc adm drain {{ nodename }}--ignore-daemonsets --delete-local-data --force --grace-period=0
     when: reboot_required
      tags:
       - never
       - healthcheck

  ###############################patching step #############################

    block:
      - name: Upgrade packages on the server
        user: cioauto
        become: true
         yum:
          name: kernel
          #name="*" 
          #for all packages
          state: latest
          #when: ansible_distribution =='Red Hat Enterprise Linux'
        register: yum_update
  
      #this task is to check if kernel update ocurred and system needs reboot or not
      - name: verify if reboot is required after kernel update
        shell: if [ $(rpm -q --last kernel | awk 'NR==1 {print $1}') != kernel-$(uname -r) ]; then echo 'reboot_needed'; else echo 'Kernel is current'; fi
        ignore_errors: true 
        register: reboot_required
      tags:
       - never
       - healthcheck

###########################
    block:
      - name: restart system
        command: shutdown -r now "Rebooting System After Patching"
        async: 0
        poll: 0
        ignore_errors: true
        #register: reboot_required var
        changed_when: "reboot_required.stdout == 'reboot_needed'"
        register: reboot_started
       
      - name: Wait for system to become reachable 
        wait_for_connection:
          timeout: 900

      - name: Wait for port 8000 to become open on the host, don't start checking for 10 seconds
         wait_for: host={{ nodename}}
          port: 8000
          delay: 10
          net_ping:
          dest: host={{ nodename }}
          state: present
        tags:
         - never
         - healthcheck   
         
       -name: node Ready,Scheduling
        command: oc adm uncordon {{ nodename }}
  
